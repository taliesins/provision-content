#!/usr/bin/env bash
# Kubernetes Rebar Immutable Boot (KRIB) Mount Disks
set -e

# Get access and who we are.
{{template "setup.tmpl" .}}
[[ $RS_UUID ]] || export RS_UUID="{{.Machine.UUID}}"

# Set machine icon and color for KRIB cluster building
drpcli machines update $RS_UUID "{\"Meta\":{\"color\":\"yellow\", \"icon\": \"ship\"}}" | jq .Meta

# This will test for sledgehammer and if found use the first disk
# as docker filesystem.

BE=$(drpcli machines show $RS_UUID | jq -r .BootEnv)
case $BE in
  sledgehammer)
    ;;
  coreos-*-live)
    ;;
  *)
    echo "Not in valid operating system - do not do anything"
    exit 0
    ;;
esac

# Umount disk if already mounted
export MOUNT=/mnt/hdd

if grep -qs $MOUNT /proc/mounts; then
  umount /dev/sda1
else
    echo "/dev/sda1 is not mounted"
fi

GETDISK=$(lsblk | grep "disk" | awk '{ print $1 }' | grep -v "fd*" | head -1)
echo "Found /dev/$GETDISK - using ..."

echo "Making partitions"
echo "
n




w
" | fdisk /dev/$GETDISK || true

partprobe
partx -u /dev/${GETDISK}

echo "Make filesystem - xfs - docker likes it"

mkfs.xfs -f /dev/${GETDISK}1

echo "Mount filesystem - put it in place, put not permanently"

mkdir -p /mnt/hdd
mount /dev/${GETDISK}1 /mnt/hdd
mkdir -p /mnt/hdd/docker
mkdir -p /mnt/hdd/kubectl

echo "Record docker working directory for future users"
set_param docker/working-dir /mnt/hdd/docker

echo "Record kubectl working directory for future users"
set_param kubectl/working-dir /mnt/hdd/kubectl

echo "Mounted directory for docker and kubectl successful."
exit 0

